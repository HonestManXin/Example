package com.qihoo.example.picture;import java.io.File;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import com.qihoo.example.FileUtil;import com.qihoo.example.R;import android.app.Activity;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.Parcelable;import android.view.MotionEvent;import android.widget.ImageView;public class FullScreenPictureActivity extends Activity {		private int curPosition = 0;	private Bundle[] picts = null;		private ImageView imageView = null;		private double slide_prev_x = 0;	private ExecutorService exec = Executors.newFixedThreadPool(5);	private Handler handler = null;		@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.fullpict);				imageView = (ImageView) findViewById(R.id.full_imageView);				Bundle data = getIntent().getBundleExtra("data");		curPosition = data.getInt("position");		Parcelable[] ps = data.getParcelableArray("pictures");		picts = new Bundle[ps.length];		for (int i=0; i<ps.length; i++) {			picts[i] = (Bundle) ps[i];		}				handler = new Handler() {			@Override			public void handleMessage(Message msg) {				Bundle data =  msg.getData();				String nid = data.getString("nid");				int position = data.getInt("position");				//String name = data.getString("name");				Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));				if (position == curPosition) {					imageView.setImageBitmap(map);				}			}		};		exec.execute(new DownLoadPreview(handler, picts[curPosition], curPosition));	}		@Override    public boolean onTouchEvent(MotionEvent event) {    	    	int iAction = event.getAction();    	double slide_curr_x = 0;    	    	if (iAction == MotionEvent.ACTION_DOWN) {    		slide_prev_x = event.getX();    	}    	    	if (iAction == MotionEvent.ACTION_UP) {    		slide_curr_x = event.getX();    		    		if (slide_curr_x < slide_prev_x) {    			if(curPosition == 0) {    				curPosition = picts.length-1;    			} else {    				curPosition = curPosition -1;    			}    		} else if (slide_curr_x > slide_prev_x) {    			curPosition = (curPosition+1)%(picts.length);    		}    		    		exec.execute(new DownLoadPreview(handler, picts[curPosition], curPosition));    	}    	    	return super.onTouchEvent(event);    }			@Override	protected void onDestroy() {		// TODO Auto-generated method stub		if (exec != null) {			exec.shutdown();			exec = null;		}		super.onDestroy();	}}class DownLoadPreview implements Runnable {	private Handler handler = null;	private Bundle data;	private int position = 0;		public DownLoadPreview(Handler handler, Bundle data, int position) {		this.handler = handler;		this.data = data;		this.position = position;	}		public void run() {		String preview = data.getString("preview");		String nid = data.getString("nid");		String name = data.getString("name");				Bitmap map = FileUtil.getPreviewBitMapIfNecessary(preview, nid);		Message msg = handler.obtainMessage();		Bundle bundle = new Bundle();		bundle.putInt("position", position);		bundle.putString("nid", nid);		bundle.putString("name", name);		msg.setData(data);		handler.sendMessage(msg);	}	}