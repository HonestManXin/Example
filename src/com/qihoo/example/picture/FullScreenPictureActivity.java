package com.qihoo.example.picture;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.atomic.AtomicInteger;import android.app.Activity;import android.graphics.Bitmap;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.os.Parcelable;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.widget.ImageView;import android.widget.TextView;import com.qihoo.example.FileUtil;import com.qihoo.example.R;public class FullScreenPictureActivity extends Activity {	private List<Bundle> datas= new ArrayList<Bundle>();	private List<View> picts = new ArrayList<View>();		private ExecutorService exec = Executors.newFixedThreadPool(5);	private MyImageUpdateHandler handler = null;	private View info = null;	private View ops = null;	private ViewPager viewPager = null;	private int curIndex = 0;	private PagerAdapter adapter = null;	private Animation animation = null;	private AnimationController controller = new AnimationController();	private TextView photoName = null;	private TextView photoIndex = null;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.photo_full);				animation = AnimationUtils.loadAnimation(this, R.anim.rotate_loading_anim);		animation.setInterpolator(new LinearInterpolator());				viewPager = (ViewPager) findViewById(R.id.photo_full_imageView);		info = findViewById(R.id.photo_info);		ops = findViewById(R.id.photo_operation);		photoIndex = (TextView) findViewById(R.id.photo_index);		photoName = (TextView) findViewById(R.id.photo_name);		handler = new MyImageUpdateHandler();				initPassArgument();		setViewerEvent();		setTitleInfo(curIndex);		adapter = new MyPagerAdapter();		viewPager.setAdapter(adapter);				viewPager.setCurrentItem(curIndex);		LoadedImageView curImage = (LoadedImageView) picts.get(curIndex).findViewById(R.id.photo_full_item);		if (!curImage.isLoaded()) {			asyncLoadPhoto(curIndex);		}	}		private void asyncLoadPhoto(int index) {		Bundle bundle = datas.get(index);		View view = picts.get(index);		LoadedImageView imageView = (LoadedImageView) view.findViewById(R.id.photo_full_item);		exec.execute(new DownLoadPreview(handler, bundle, imageView));	}				/**	 * 初始化参数	 */	private void initPassArgument() {		Bundle bundle = getIntent().getBundleExtra("data");		curIndex = bundle.getInt("index");		System.out.println(curIndex);		Parcelable[] ps = bundle.getParcelableArray("pictures");		for (Parcelable p : ps) {			Bundle b = (Bundle) p;			datas.add(b);			View view = getLayoutInflater().inflate(R.layout.photo_full_list_item, null);			LoadedImageView imageView = (LoadedImageView) view.findViewById(R.id.photo_full_item);			String nid = b.getString("nid");			Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));			if (map == null) {				imageView.setLoaded(false);				imageView.setImageResource(R.drawable.photo_loading);				imageView.startAnimation(animation);			} else {				imageView.setImageBitmap(map);				imageView.setLoaded(true);			}			picts.add(view);		}	}		/**	 * 设置标题栏的信息	 * @param index	 */	private void setTitleInfo(int index) {		Bundle bundle = datas.get(index);		String name = bundle.getString("name");		int length = datas.size();		photoName.setText(FileUtil.getFileShortName(name));		photoIndex.setText(index + "/" + length);	}		private void setViewerEvent() {		viewPager.setOnClickListener(new View.OnClickListener() {			public void onClick(View v) {				int visible = info.getVisibility();				if (visible == View.VISIBLE) {					controller.slideFadeOut(info, 1000, 100);					controller.slideFadeOut(ops, 1000, 100);				} else {					controller.slideFadeIn(info, 1000, 100);					controller.slideFadeIn(ops, 1000, 100);				}			}		});				viewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {						public void onPageSelected(int index) {				setTitleInfo(index);				LoadedImageView curImage = (LoadedImageView) picts.get(index).findViewById(R.id.photo_full_item);				if (!curImage.isLoaded()) {					asyncLoadPhoto(index);				}			}						public void onPageScrolled(int arg0, float arg1, int arg2) {							}						public void onPageScrollStateChanged(int arg0) {							}		});	}		private class MyPagerAdapter extends PagerAdapter{		@Override		public int getCount() {			return picts.size();		}		@Override		public boolean isViewFromObject(View view, Object object) {			return view == object;		}				@Override		public Object instantiateItem(View container, int position) {			((ViewPager) container).addView(picts.get(position));			return picts.get(position);		}				@Override		public void destroyItem(View container, int position, Object view) {			((ViewPager) container).removeView(picts.get(position));		}				@Override		public void finishUpdate(View container) {			// TODO Auto-generated method stub			super.finishUpdate(container);		}				@Override		public void startUpdate(View container) {			// TODO Auto-generated method stub			super.startUpdate(container);		}	}}class MyImageUpdateHandler extends Handler {	private Map<String, LoadedImageView> updateView = new ConcurrentHashMap<String, LoadedImageView>();		public void addUpdateView(String id, LoadedImageView view) {		updateView.put(id, view);	}		@Override	public void handleMessage(Message msg) {		Bundle bundle = msg.getData();		String nid = bundle.getString("nid");		String id = bundle.getString("id");		Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));		if (map != null) {			LoadedImageView view = updateView.get(id);			view.clearAnimation();			view.setImageBitmap(map);			view.setLoaded(true);		} else {			//网络故障		}	}}class DownLoadPreview implements Runnable {	private static AtomicInteger idGenerator = new AtomicInteger();	private MyImageUpdateHandler handler = null;	private Bundle data;	private LoadedImageView view;		public DownLoadPreview(MyImageUpdateHandler handler, Bundle data, LoadedImageView view) {		this.handler = handler;		this.data = data;		this.view = view;	}		public void run() {		String preview = data.getString("preview");		String nid = data.getString("nid");		String id = idGenerator.getAndDecrement() + "";				Bitmap map = FileUtil.getPreviewBitMapIfNecessary(preview, nid);		Message msg = handler.obtainMessage();		Bundle bundle = new Bundle();		bundle.putString("nid", nid);		bundle.putString("id", id);		msg.setData(bundle);				handler.addUpdateView(id, view);		handler.sendMessage(msg);	}	}/*public class FullScreenPictureActivity extends Activity {		private int curIndex = 0;	private Bundle[] picts = null;	private ImageView imageView = null;		private ExecutorService exec = Executors.newFixedThreadPool(5);	private Handler handler = null;		private View info = null;	private View ops = null;		private GestureDetector mGestureDetector = null;		@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.fullpict);				imageView = (ImageView) findViewById(R.id.full_imageView);		info = findViewById(R.id.photo_info);		ops = findViewById(R.id.photo_operation);		getPassArgument();				//setPictureClickEvent();		mGestureDetector = new GestureDetector(this, new MyOnGestureListener());				handler = new Handler() {			@Override			public void handleMessage(Message msg) {				Bundle data =  msg.getData();				String nid = data.getString("nid");				int position = data.getInt("index");				//String name = data.getString("name");				System.out.println("position is :" + position + " Cur index is :" + curIndex);				Bitmap map = FileUtil.loadBitmapFromCache(FileUtil.getPreviewPicName(nid));				if (position == curIndex) {					imageView.setImageBitmap(map);				}			}		};		exec.execute(new DownLoadPreview(handler, picts[curIndex], curIndex));	}		private void getPassArgument() {		Bundle data = getIntent().getBundleExtra("data");		curIndex = data.getInt("index");		Parcelable[] ps = data.getParcelableArray("pictures");		picts = new Bundle[ps.length];		for (int i=0; i<ps.length; i++) {			picts[i] = (Bundle) ps[i];		}	}		@Override	protected void onDestroy() {		// TODO Auto-generated method stub		if (exec != null) {			exec.shutdown();			exec = null;		}		super.onDestroy();	}		@Override	public boolean onTouchEvent(MotionEvent event) {		return mGestureDetector.onTouchEvent(event);	}		private class MyOnGestureListener extends SimpleOnGestureListener  {		private static final int FLING_MIN_DISTANCE = 120;//移动最小距离  		private static final int FLING_MIN_VELOCITY = 200;//移动最大速度		private AnimationController controller = new AnimationController();				@Override		public boolean onSingleTapUp(MotionEvent e) {			int visible = info.getVisibility();			if (visible == View.VISIBLE) {				controller.slideFadeOut(info, 1000, 100);				controller.slideFadeOut(ops, 1000, 100);			} else {				controller.slideFadeIn(info, 1000, 100);				controller.slideFadeIn(ops, 1000, 100);			}			return super.onSingleTapUp(e);		}				@Override		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,				float velocityY) {			boolean moved = false;						//向右			if ((e1.getX() - e2.getX()) > FLING_MIN_DISTANCE &&					(Math.abs(velocityX) > FLING_MIN_VELOCITY)) {				if(curIndex == 0) {    				curIndex = picts.length-1;    			} else {    				curIndex = curIndex -1;    			}				moved = true;			}						//向左			if ((e2.getX() - e1.getX()) > FLING_MIN_DISTANCE && 					(Math.abs(velocityX) > FLING_MIN_VELOCITY)) {				curIndex = (curIndex+1)%(picts.length);				moved = true;			}						if (moved) {				exec.execute(new DownLoadPreview(handler, picts[curIndex], curIndex));			}			return true;		}	}}class DownLoadPreview implements Runnable {	private Handler handler = null;	private Bundle data;	private int position = 0;		public DownLoadPreview(Handler handler, Bundle data, int postion) {		this.handler = handler;		this.data = data;		this.position = postion;	}		public void run() {		String preview = data.getString("preview");		String nid = data.getString("nid");		String name = data.getString("name");				Bitmap map = FileUtil.getPreviewBitMapIfNecessary(preview, nid);		Message msg = handler.obtainMessage();		Bundle bundle = new Bundle();		bundle.putInt("index", position);		System.out.println("positon is :" + position);		bundle.putString("nid", nid);		bundle.putString("name", name);		msg.setData(bundle);		handler.sendMessage(msg);	}	}*/